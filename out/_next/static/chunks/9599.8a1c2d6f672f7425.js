"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9599],{8057:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(1799),i=t(9396),o=t(5893),a=t(2752),s=t(1130),c={"/index.js":{code:'import React, { StrictMode } from "react";\nimport { createRoot } from \'react-dom/client\';\nimport "./styles.css";\nimport "./center.css";\n\nimport App from "./App";\n\nconst container = document.getElementById(\'root\');\nconst root = createRoot(container);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n',hidden:!0},"/center.css":{code:"\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 450px;\n    color: currentColor;\n}\n",hidden:!0},"/styles.css":{code:"/* Custom styles for your React previews here */\nbody {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n",hidden:!0},"/index.html":{code:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <title>React app</title>\n</head>\n<body>\n  <div id="root"></div>\n</body>\n</html>\n',hidden:!0}},d={colors:{hover:"var(--maximeheckel-colors-brand)",clickable:"var(--maximeheckel-colors-typeface-secondary)",accent:"var(--maximeheckel-colors-brand)",errorSurface:"var(--maximeheckel-colors-danger-emphasis)",error:"var(--maximeheckel-colors-danger)",surface3:"var(--maximeheckel-colors-emphasis)",surface2:"var(--maximeheckel-border-color)",surface1:"var(--code-snippet-background)"},syntax:{plain:"var(--token-comment)",comment:{color:"var(--token-comment)"},keyword:"var(--token-keyword)",tag:"var(--token-symbol)",punctuation:"var(--token-punctuation)",definition:"var(--token-function)",property:"var(--token-function)",static:"var(--token-comment)",string:"var(--token-selector)"},font:{body:"var(--font-display)",mono:"var(--font-mono)",size:"14px",lineHeight:"26px"}},l={showNavigator:!1,showInlineErrors:!0,showLineNumbers:!0,editorHeight:520},h=(0,s.g)("div",{".sp-layout":{position:"relative",marginBottom:"2.25rem",borderRadius:"var(--border-radius-2)",boxShadow:s.a[1],"@media (max-width: 750px)":{display:"block"},"@media (max-width: 1200px)":{width:"100vw",left:"50%",right:"50%",marginLeft:"-50vw",marginRight:"-50vw",borderRadius:"0px"},"@media (min-width: 1200px)":{position:"relative",width:"calc(100% + 200px)",marginLeft:"-100px",marginRight:"-100px"}},".cm-gutterElement":{fontSize:"12px",userSelect:"none",opacity:"1",color:"var(--maximeheckel-colors-typeface-tertiary)"},".button":{backgroundColor:"var(--maximeheckel-colors-body)!important",cursor:"pointer !important","&:hover":{backgroundColor:"var(--maximeheckel-colors-body)!important"}}}),m=function(e){var n,t=e.files,s=e.dependencies,m=e.template,p=e.autorun,g=void 0===p||p,w=e.editorOnly,f=void 0!==w&&w,u=e.renderOnly,v=void 0!==u&&u,E=(null===(n=e.options)||void 0===n?void 0:n.editorWidthPercentage)||50,x=100-E,T={react:c,"react-ts":"",vanilla:"","vanilla-ts":"",angular:"",vue:"",vue3:"",svelte:"",solid:""};return(0,o.jsx)(h,{children:(0,o.jsx)(a.oT,{template:m,theme:d,files:(0,r.Z)({},t,T[m]),customSetup:{dependencies:s||{}},options:{autorun:g},children:(0,o.jsxs)(a.sp,{children:[f?null:(0,o.jsx)(a.Gj,{showNavigator:l.showNavigator,style:{height:l.editorHeight,flexGrow:x,flexShrink:x,minWidth:x/(x+E)*700}}),v?null:(0,o.jsx)(a._V,(0,i.Z)((0,r.Z)({},l),{style:{height:l.editorHeight,flexGrow:E,flexShrink:E,minWidth:E/(x+E)*700}}))]})})})}},3972:function(e,n,t){t.r(n),t.d(n,{default:function(){return h}});var r=t(828),i=t(5893),o=t(8057),a=t(8046),s=t(1130),c=t(5566),d=(0,s.c)({height:"520px","@media(max-width: 750px)":{height:"1040px"}}),l={script1:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Objects\n\n/**\n * Here I use a Plane Geometry of width 1 and height 2\n * It\'s also subdivided into 24 square along the width and the height\n * which adds more vertices and edges to play with when we\'ll build our terrain\n */ \nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshBasicMaterial({\n    // Uncomment the following if you wish to visualize the wireframe of our mesh\n    // wireframe: true,\n    color: 0xffffff\n\n});\n\nconst plane = new THREE.Mesh(geometry, material);\n\n// Here we position our plane flat in front of the camera\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\nscene.add(plane);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  // field of view\n  75,\n  // aspect ratio\n  sizes.width / sizes.height,\n  // near plane: it\'s low since we want our mesh to be visible even from very close\n  0.01,\n  // far plane: how far we\'re rendering\n  20\n);\n\n// Position the camera a bit higher on the y axis and a bit further back from the center\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\n// These are custom controls I like using for dev: we can drag/rotate the scene easily\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\'s aspect ratio and projection matrix\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    // Note: We set the pixel ratio of the renderer to at most 2\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n// Animate: we call this tick function on every frame\nconst tick = () => {\n    // Update controls\n    controls.update();\n  \n    // Update the rendered scene\n    renderer.render(scene, camera);\n  \n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\n// Calling tick will initiate the rendering of the scene\ntick();\n',script2:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshBasicMaterial({\n    // Add the texture to the material\n    map: gridTexture,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\nscene.add(plane);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n// Animate\nconst tick = () => {\n    // Update controls\n    controls.update();\n\n    // Update the rendered scene\n    renderer.render(scene, camera);\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n',script3:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshStandardMaterial({\n    map: gridTexture,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\nscene.add(plane);\n\n// Light\n/**\n * We define an ambient light: a light that globally illuminates \n * all objects in the scene equally\n * \n * Here we set the color to white and the intensity to 10\n * You can tweak this value to see how bright/dim the scene\n * gets depending on the values passed\n */\nconst ambientLight = new THREE.AmbientLight("#ffffff", 10);\nscene.add(ambientLight);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n// Animate\nconst tick = () => {\n    // Update controls\n    controls.update();\n\n    // Render\n    renderer.render(scene, camera);\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n',script4:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\nconst DISPLACEMENT_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657200/blog/vaporwave-threejs-textures/displacement.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\nconst terrainTexture = textureLoader.load(DISPLACEMENT_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshStandardMaterial({\n    map: gridTexture,\n    // Add the displacement map / height map to the material\n    displacementMap: terrainTexture,\n    // Tweak the displacement scale to adjust the "intensity" of the terrain\n    displacementScale: 0.4,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\nscene.add(plane);\n\n\n// Light\n// Ambient Light\nconst ambientLight = new THREE.AmbientLight("#ffffff", 10);\nscene.add(ambientLight);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n// Animate\nconst tick = () => {\n    // Update controls\n    controls.update();\n\n    // Render\n    renderer.render(scene, camera);\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n',script5:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\nconst DISPLACEMENT_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657200/blog/vaporwave-threejs-textures/displacement.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\nconst terrainTexture = textureLoader.load(DISPLACEMENT_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n/**\n * Uncomment the following to add fog to the back of the \n * scene (at 3 units of distance from the center)\n */\n// const fog = new THREE.Fog("#000000", 1, 2.5);\n// scene.fog = fog;\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshStandardMaterial({\n    map: gridTexture,\n    displacementMap: terrainTexture,\n    displacementScale: 0.4,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\n/**\n * Here we define a second plane that will be positioned "behind" the first one\n * along the z axis.\n * We reuse the same geometry and material to define this new mesh.\n */\nconst plane2 = new THREE.Mesh(geometry, material);\nplane2.rotation.x = -Math.PI * 0.5;\nplane2.position.y = 0.0;\nplane2.position.z = -1.85; // 0.15 - 2 (the length of the first plane)\n\nscene.add(plane);\nscene.add(plane2);\n\n// Light\n// Ambient Light\nconst ambientLight = new THREE.AmbientLight("#ffffff", 10);\nscene.add(ambientLight);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nconst clock = new THREE.Clock();\n\n// Animate\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    // Update controls\n    controls.update();\n\n    /**\n     * When the first plane reaches a position of z = 2\n     * we reset it to 0, its initial position\n     */\n    plane.position.z = (elapsedTime * 0.15) % 2;\n    /**\n     * When the first plane reaches a position of z = 0\n     * we reset it to -2, its initial position\n     */\n    plane2.position.z = ((elapsedTime * 0.15) % 2) - 2;\n\n    // Render\n    renderer.render(scene, camera);\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n',script6:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\nimport { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";\nimport { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";\nimport { GammaCorrectionShader } from "three/examples/jsm/shaders/GammaCorrectionShader.js";\nimport { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";\nimport { RGBShiftShader } from "three/examples/jsm/shaders/RGBShiftShader.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\nconst DISPLACEMENT_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657200/blog/vaporwave-threejs-textures/displacement.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\nconst terrainTexture = textureLoader.load(DISPLACEMENT_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Fog\nconst fog = new THREE.Fog("#000000", 1, 2.5);\nscene.fog = fog;\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshStandardMaterial({\n    map: gridTexture,\n    displacementMap: terrainTexture,\n    displacementScale: 0.4,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\n\nconst plane2 = new THREE.Mesh(geometry, material);\nplane2.rotation.x = -Math.PI * 0.5;\nplane2.position.y = 0.0;\nplane2.position.z = -1.85; // 0.15 - 2 (the length of the first plane)\n\nscene.add(plane);\nscene.add(plane2);\n\n// Light\n// Ambient Light\nconst ambientLight = new THREE.AmbientLight("#ffffff", 10);\nscene.add(ambientLight);\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Post Processing\n// Add the effectComposer\nconst effectComposer = new EffectComposer(renderer);\neffectComposer.setSize(sizes.width, sizes.height);\neffectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Add the render path to the composer\n * This pass will take care of rendering the final scene\n */\nconst renderPass = new RenderPass(scene, camera);\neffectComposer.addPass(renderPass);\n\n/**\n * Add the rgbShift pass to the composer\n * This pass will be responsible for handling the rgbShift effect\n */\nconst rgbShiftPass = new ShaderPass(RGBShiftShader);\nrgbShiftPass.uniforms["amount"].value = 0.0015;\n\neffectComposer.addPass(rgbShiftPass);\n\n/**\n * Add the gammaCorrection pass to the composer to fix\n * the color issues\n */ \nconst gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);\neffectComposer.addPass(gammaCorrectionPass);\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    // Update effect composer\n    effectComposer.setSize(sizes.width, sizes.height);\n    effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nconst clock = new THREE.Clock();\n\n// Animate\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    // Update controls\n    controls.update();\n\n    plane.position.z = (elapsedTime * 0.15) % 2;\n    plane2.position.z = ((elapsedTime * 0.15) % 2) - 2;\n\n    // Render\n    /**\n     * We don\'t need the renderer anymore, since it\'s taken care of\n     * in the render pass of the effect composer\n     */\n    // renderer.render(scene, camera);\n    /**\n     * We use the render method of the effect composer instead to\n     * render the scene with our post-processing effects\n     */ \n    effectComposer.render();\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n',script7:'import "../styles.css";\nimport * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";\nimport { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";\nimport { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";\nimport { GammaCorrectionShader } from "three/examples/jsm/shaders/GammaCorrectionShader.js";\nimport { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";\nimport { RGBShiftShader } from "three/examples/jsm/shaders/RGBShiftShader.js";\n\nconst TEXTURE_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657168/blog/vaporwave-threejs-textures/grid.png";\nconst DISPLACEMENT_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657200/blog/vaporwave-threejs-textures/displacement.png";\nconst METALNESS_PATH = "https://res.cloudinary.com/dg5nsedzw/image/upload/v1641657200/blog/vaporwave-threejs-textures/metalness.png";\n\n// Textures\nconst textureLoader = new THREE.TextureLoader();\nconst gridTexture = textureLoader.load(TEXTURE_PATH);\nconst terrainTexture = textureLoader.load(DISPLACEMENT_PATH);\nconst metalnessTexture = textureLoader.load(METALNESS_PATH);\n\nconst canvas = document.querySelector("canvas.webgl");\n\n// Scene\nconst scene = new THREE.Scene();\n\n// Fog\nconst fog = new THREE.Fog("#000000", 1, 2.5);\nscene.fog = fog;\n\n// Objects\nconst geometry = new THREE.PlaneGeometry(1, 2, 24, 24);\nconst material = new THREE.MeshStandardMaterial({\n    map: gridTexture,\n    displacementMap: terrainTexture,\n    displacementScale: 0.4,\n    /**\n     * Add a metalnessMap to our material that will tell the renderer\n     * where the "rough" parts of our terrains are\n     */ \n    metalnessMap: metalnessTexture,\n    /**\n     * Make the terrain very very metallic so it will reflect the light\n     * and not diffuse it: it will stay black\n     */ \n    metalness: 0.96,\n    /**\n     * Make the terrain a bit rough so the rough parts will diffuse the light\n     * well\n     */ \n    roughness: 0.5,\n});\n\nconst plane = new THREE.Mesh(geometry, material);\nplane.rotation.x = -Math.PI * 0.5;\nplane.position.y = 0.0;\nplane.position.z = 0.15;\n\n\nconst plane2 = new THREE.Mesh(geometry, material);\nplane2.rotation.x = -Math.PI * 0.5;\nplane2.position.y = 0.0;\nplane2.position.z = -1.85; // 0.15 - 2 (the length of the first plane)\n\nscene.add(plane);\nscene.add(plane2);\n\n// Light\n// Ambient Light\nconst ambientLight = new THREE.AmbientLight("#ffffff", 10);\nscene.add(ambientLight);\n\n// Right Spotlight aiming to the left\nconst spotlight = new THREE.SpotLight("#d53c3d", 20, 25, Math.PI * 0.1, 0.25);\nspotlight.position.set(0.5, 0.75, 2.2);\n// Target the spotlight to a specific point to the left of the scene\nspotlight.target.position.x = -0.25;\nspotlight.target.position.y = 0.25;\nspotlight.target.position.z = 0.25;\nscene.add(spotlight);\nscene.add(spotlight.target);\n\n// Left Spotlight aiming to the right\nconst spotlight2 = new THREE.SpotLight("#d53c3d", 20, 25, Math.PI * 0.1, 0.25);\nspotlight2.position.set(-0.5, 0.75, 2.2);\n// Target the spotlight to a specific point to the right side of the scene\nspotlight2.target.position.x = 0.25;\nspotlight2.target.position.y = 0.25;\nspotlight2.target.position.z = 0.25;\nscene.add(spotlight2);\nscene.add(spotlight2.target);\n\n\n// Sizes\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.01,\n  20\n);\ncamera.position.x = 0;\ncamera.position.y = 0.06;\ncamera.position.z = 1.1;\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n// Post Processing\nconst effectComposer = new EffectComposer(renderer);\neffectComposer.setSize(sizes.width, sizes.height);\neffectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\nconst renderPass = new RenderPass(scene, camera);\neffectComposer.addPass(renderPass);\n\nconst rgbShiftPass = new ShaderPass(RGBShiftShader);\nrgbShiftPass.uniforms["amount"].value = 0.0015;\n\neffectComposer.addPass(rgbShiftPass);\n\nconst gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);\neffectComposer.addPass(gammaCorrectionPass);\n\n// Event listener to handle screen resize\nwindow.addEventListener("resize", () => {\n    // Update sizes\n    sizes.width = window.innerWidth;\n    sizes.height = window.innerHeight;\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height;\n    camera.updateProjectionMatrix();\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n    // Update effect composer\n    effectComposer.setSize(sizes.width, sizes.height);\n    effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nconst clock = new THREE.Clock();\n\n// Animate\nconst tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    // Update controls\n    controls.update();\n\n    plane.position.z = (elapsedTime * 0.15) % 2;\n    plane2.position.z = ((elapsedTime * 0.15) % 2) - 2;\n\n    // Render\n    // renderer.render(scene, camera);\n    effectComposer.render();\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick);\n};\n\ntick();\n'},h=function(e){var n=e.script,t=(0,r.Z)((0,a.YD)(),2),s=t[0],h=t[1],m=(0,c.Z)(),p=m.tier,g=m.loading,w=p>1;return(0,i.jsx)("div",{ref:s,children:h&&!g?(0,i.jsx)(o.Z,{autorun:w,template:"vanilla",dependencies:{three:"0.134.0"},files:{"/src/index.js":{code:l[n]},"/index.html":{code:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Linear</title>\n</head>\n<body>\n    <canvas class="webgl"></canvas>\n</body>\n</html>\n',hidden:!0},"/styles.css":{code:"body {\n    margin: 0;\n}\n\n.webgl {\n    position: fixed;\n    top: 0;\n    left: 0;\n    outline: none;\n}\n",hidden:!0}}}):(0,i.jsx)("div",{className:d()})})}},5566:function(e,n,t){t.d(n,{Z:function(){return f}});var r=t(828);function i(e,n,t,r){return new(t||(t=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}c((r=r.apply(e,n||[])).next())}))}const o=["geforce 320m","geforce 8600","geforce 8600m gt","geforce 8800 gs","geforce 8800 gt","geforce 9400","geforce 9400m g","geforce 9400m","geforce 9600m gt","geforce 9600m","geforce fx go5200","geforce gt 120","geforce gt 130","geforce gt 330m","geforce gtx 285","google swiftshader","intel g41","intel g45","intel gma 4500mhd","intel gma x3100","intel hd 3000","intel q45","legacy","mali-2","mali-3","mali-4","quadro fx 1500","quadro fx 4","quadro fx 5","radeon hd 2400","radeon hd 2600","radeon hd 4670","radeon hd 4850","radeon hd 4870","radeon hd 5670","radeon hd 5750","radeon hd 6290","radeon hd 6300","radeon hd 6310","radeon hd 6320","radeon hd 6490m","radeon hd 6630m","radeon hd 6750m","radeon hd 6770m","radeon hd 6970m","sgx 543","sgx543"];function a(e){return e.toLowerCase().replace(/^angle ?\((.+)\)*$/,"$1").replace(/\s(\d{1,2}gb|direct3d.+$)|\(r\)| \([^)]+\)$/g,"").replace(/(?:vulkan|opengl) \d+\.\d+(?:\.\d+)?(?: \((.*)\))?/,"$1")}const s="undefined"==typeof window,c=(()=>{if(s)return;const{userAgent:e,platform:n,maxTouchPoints:t}=window.navigator,r=/(iphone|ipod|ipad)/i.test(e),i="iPad"===n||"MacIntel"===n&&t>0&&!window.MSStream;return{isIpad:i,isMobile:/android/i.test(e)||r||i,isSafari12:/Version\/12.+Safari/.test(e)}})();const d=[],l=[];function h(e,n){if(e===n)return 0;const t=e;e.length>n.length&&(e=n,n=t);let r=e.length,i=n.length;for(;r>0&&e.charCodeAt(~-r)===n.charCodeAt(~-i);)r--,i--;let o,a=0;for(;a<r&&e.charCodeAt(a)===n.charCodeAt(a);)a++;if(r-=a,i-=a,0===r)return i;let s,c,h=0,m=0,p=0;for(;m<r;)l[m]=e.charCodeAt(a+m),d[m]=++m;for(;p<i;)for(o=n.charCodeAt(a+p),s=p++,h=p,m=0;m<r;m++)c=o===l[m]?s:s+1,s=d[m],h=d[m]=s>h?c>h?h+1:c:c>s?s+1:c;return h}function m(e){return null!=e}class p extends Error{constructor(e){super(e),Object.setPrototypeOf(this,new.target.prototype)}}const g=({mobileTiers:e=[0,15,30,60],desktopTiers:n=[0,15,30,60],override:t={},glContext:r,failIfMajorPerformanceCaveat:d=!1,benchmarksURL:l="https://unpkg.com/detect-gpu@4.0.42/dist/benchmarks"}={})=>i(void 0,void 0,void 0,(function*(){const g={};if(s)return{tier:0,type:"SSR"};const{isIpad:w=!!(null==c?void 0:c.isIpad),isMobile:f=!!(null==c?void 0:c.isMobile),screenSize:u=window.screen,loadBenchmarks:v=(e=>i(void 0,void 0,void 0,(function*(){const n=yield fetch(`${l}/${e}`).then((e=>e.json()));if(parseInt(n.shift().split(".")[0],10)<4)throw new p("Detect GPU benchmark data is out of date. Please update to version 4x");return n})))}=t;let{renderer:E}=t;const x=(e,n,t,r,i)=>({device:i,fps:r,gpu:t,isMobile:f,tier:e,type:n});let T,z="";if(E)E=a(E),T=[E];else{const e=r||function(e,n=!1){const t={alpha:!1,antialias:!1,depth:!1,failIfMajorPerformanceCaveat:n,powerPreference:"high-performance",stencil:!1};e&&delete t.powerPreference;const r=window.document.createElement("canvas"),i=r.getContext("webgl",t)||r.getContext("experimental-webgl",t);return null!=i?i:void 0}(null==c?void 0:c.isSafari12,d);if(!e)return x(0,"WEBGL_UNSUPPORTED");const n=e.getExtension("WEBGL_debug_renderer_info");if(n&&(E=e.getParameter(n.UNMASKED_RENDERER_WEBGL)),!E)return x(1,"FALLBACK");z=E,E=a(E),T=function(e,n,t){return"apple gpu"===n?function(e,n,t){if(!t)return[n];const r=function(e){const n=e.createShader(35633),t=e.createShader(35632),r=e.createProgram();if(!(t&&n&&r))return;e.shaderSource(n,"\n    precision highp float;\n    attribute vec3 aPosition;\n    varying float vvv;\n    void main() {\n      vvv = 0.31622776601683794;\n      gl_Position = vec4(aPosition, 1.0);\n    }\n  "),e.shaderSource(t,"\n    precision highp float;\n    varying float vvv;\n    void main() {\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\n      enc = fract(enc);\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n      gl_FragColor = enc;\n    }\n  "),e.compileShader(n),e.compileShader(t),e.attachShader(r,n),e.attachShader(r,t),e.linkProgram(r),e.detachShader(r,n),e.detachShader(r,t),e.deleteShader(n),e.deleteShader(t),e.useProgram(r);const i=e.createBuffer();e.bindBuffer(34962,i),e.bufferData(34962,new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),35044);const o=e.getAttribLocation(r,"aPosition");e.vertexAttribPointer(o,3,5126,!1,0,0),e.enableVertexAttribArray(o),e.clearColor(1,1,1,1),e.clear(16384),e.viewport(0,0,1,1),e.drawArrays(4,0,3);const a=new Uint8Array(4);return e.readPixels(0,0,1,1,6408,5121,a),e.deleteProgram(r),e.deleteBuffer(i),a.join("")}(e),i="801621810",o="8016218135",a="80162181161",s=(null==c?void 0:c.isIpad)?[["a7",a,12],["a8",o,15],["a8x",o,15],["a9",o,15],["a9x",o,15],["a10",o,15],["a10x",o,15],["a12",i,15],["a12x",i,15],["a12z",i,15],["a14",i,15],["m1",i,15]]:[["a7",a,12],["a8",o,12],["a9",o,15],["a10",o,15],["a11",i,15],["a12",i,15],["a13",i,15],["a14",i,15]];let d;return"80162181255"===r?d=s.filter((([,,e])=>e>=14)):(d=s.filter((([,e])=>e===r)),d.length||(d=s)),d.map((([e])=>`apple ${e} gpu`))}(e,n,t):[n]}(e,E,f)}const R=(yield Promise.all(T.map((function(e){var n;return i(this,void 0,void 0,(function*(){const t=(e=>{const n=f?["adreno","apple","mali-t","mali","nvidia","powervr"]:["intel","apple","amd","radeon","nvidia","geforce"];for(const t of n)if(e.includes(t))return t})(e);if(!t)return;const r=`${f?"m":"d"}-${t}${w?"-ipad":""}.json`,i=g[r]=null!==(n=g[r])&&void 0!==n?n:v(r);let o;try{o=yield i}catch(t){if(t instanceof p)throw t;return}const a=function(e){var n;const t=(e=e.replace(/\([^)]+\)/,"")).match(/\d+/)||e.match(/(\W|^)([A-Za-z]{1,3})(\W|$)/g);return null!==(n=null==t?void 0:t.join("").replace(/\W|amd/g,""))&&void 0!==n?n:""}(e);let s=o.filter((([,e])=>e===a));s.length||(s=o.filter((([n])=>n.includes(e))));const c=s.length;if(0===c)return;let d,[l,,,m]=c>1?s.map((n=>[n,h(e,n[0])])).sort((([,e],[,n])=>e-n))[0][0]:s[0],E=Number.MAX_VALUE;const{devicePixelRatio:x}=window,T=u.width*x*u.height*x;for(const e of m){const[n,t]=e,r=n*t,i=Math.abs(T-r);i<E&&(E=i,d=e)}if(!d)return;const[,,z,R]=d;return[E,z,l,R]}))})))).filter(m).sort((([e=Number.MAX_VALUE,n],[t=Number.MAX_VALUE,r])=>e===t?n-r:e-t));if(!R.length){const e=o.find((e=>E.includes(e)));return e?x(0,"BLOCKLISTED",e):x(1,"FALLBACK",`${E} (${z})`)}const[,P,b,y]=R[0];if(-1===P)return x(0,"BLOCKLISTED",b,P,y);const S=f?e:n;let C=0;for(let e=0;e<S.length;e++)P>=S[e]&&(C=e);return x(C,"BENCHMARK",b,P,y)}));var w=t(7294),f=function(){var e=(0,r.Z)(w.useState(0),2),n=e[0],t=e[1],i=(0,r.Z)(w.useState(!0),2),o=i[0],a=i[1];return w.useEffect((function(){g().then((function(e){var n=e.tier;t(n),a(!1)}))}),[t]),{tier:n,loading:o}}}}]);