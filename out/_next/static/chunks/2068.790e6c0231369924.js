"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2068],{8057:function(n,e,t){t.d(e,{Z:function(){return p}});var o=t(1799),r=t(9396),i=t(5893),s=t(2752),c=t(1130),a={"/index.js":{code:'import React, { StrictMode } from "react";\nimport { createRoot } from \'react-dom/client\';\nimport "./styles.css";\nimport "./center.css";\n\nimport App from "./App";\n\nconst container = document.getElementById(\'root\');\nconst root = createRoot(container);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n',hidden:!0},"/center.css":{code:"\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 450px;\n    color: currentColor;\n}\n",hidden:!0},"/styles.css":{code:"/* Custom styles for your React previews here */\nbody {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n",hidden:!0},"/index.html":{code:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <title>React app</title>\n</head>\n<body>\n  <div id="root"></div>\n</body>\n</html>\n',hidden:!0}},l={colors:{hover:"var(--maximeheckel-colors-brand)",clickable:"var(--maximeheckel-colors-typeface-secondary)",accent:"var(--maximeheckel-colors-brand)",errorSurface:"var(--maximeheckel-colors-danger-emphasis)",error:"var(--maximeheckel-colors-danger)",surface3:"var(--maximeheckel-colors-emphasis)",surface2:"var(--maximeheckel-border-color)",surface1:"var(--code-snippet-background)"},syntax:{plain:"var(--token-comment)",comment:{color:"var(--token-comment)"},keyword:"var(--token-keyword)",tag:"var(--token-symbol)",punctuation:"var(--token-punctuation)",definition:"var(--token-function)",property:"var(--token-function)",static:"var(--token-comment)",string:"var(--token-selector)"},font:{body:"var(--font-display)",mono:"var(--font-mono)",size:"14px",lineHeight:"26px"}},d={showNavigator:!1,showInlineErrors:!0,showLineNumbers:!0,editorHeight:520},m=(0,c.g)("div",{".sp-layout":{position:"relative",marginBottom:"2.25rem",borderRadius:"var(--border-radius-2)",boxShadow:c.a[1],"@media (max-width: 750px)":{display:"block"},"@media (max-width: 1200px)":{width:"100vw",left:"50%",right:"50%",marginLeft:"-50vw",marginRight:"-50vw",borderRadius:"0px"},"@media (min-width: 1200px)":{position:"relative",width:"calc(100% + 200px)",marginLeft:"-100px",marginRight:"-100px"}},".cm-gutterElement":{fontSize:"12px",userSelect:"none",opacity:"1",color:"var(--maximeheckel-colors-typeface-tertiary)"},".button":{backgroundColor:"var(--maximeheckel-colors-body)!important",cursor:"pointer !important","&:hover":{backgroundColor:"var(--maximeheckel-colors-body)!important"}}}),p=function(n){var e,t=n.files,c=n.dependencies,p=n.template,u=n.autorun,h=void 0===u||u,x=n.editorOnly,f=void 0!==x&&x,v=n.renderOnly,g=void 0!==v&&v,b=(null===(e=n.options)||void 0===e?void 0:e.editorWidthPercentage)||50,y=100-b,k={react:a,"react-ts":"",vanilla:"","vanilla-ts":"",angular:"",vue:"",vue3:"",svelte:"",solid:""};return(0,i.jsx)(m,{children:(0,i.jsx)(s.oT,{template:p,theme:l,files:(0,o.Z)({},t,k[p]),customSetup:{dependencies:c||{}},options:{autorun:h},children:(0,i.jsxs)(s.sp,{children:[f?null:(0,i.jsx)(s.Gj,{showNavigator:d.showNavigator,style:{height:d.editorHeight,flexGrow:y,flexShrink:y,minWidth:y/(y+b)*700}}),g?null:(0,i.jsx)(s._V,(0,r.Z)((0,o.Z)({},d),{style:{height:d.editorHeight,flexGrow:b,flexShrink:b,minWidth:b/(y+b)*700}}))]})})})}},2068:function(n,e,t){t.r(e);var o=t(5893),r=t(8057);e.default=function(){return(0,o.jsx)(r.Z,{autorun:!0,template:"react",dependencies:{"@stitches/react":"^1.2.7"},files:{"/App.js":{code:"import { styled } from '@stitches/react';\nimport React from 'react';\nimport './scene.css';\n\nconst Wrapper = styled('div', {\n  display: 'flex',\n  width: '300px',\n  paddingTop: '56px',\n});\n\nconst Content = styled('div', {\n  height: '500px',\n  overflowY: 'scroll',\n  paddingRight: '8px',\n\n  '&::-webkit-scrollbar': {\n    WebkitAppearance: 'none',\n    width: '8px',\n  },\n\n  '&::-webkit-scrollbar-track': {\n    backgroundColor: 'hsla(222, 15%, 70%, 0.2)',\n    borderRadius: '8px',\n  },\n\n  '&::-webkit-scrollbar-thumb': {\n    borderRadius: '8px',\n    backgroundColor: '#C4C9D4',\n  },\n});\n\nconst TableOfContent = styled('div', {\n  width: '100px',\n});\n\nconst List = styled('ul', {\n  position: 'absolute',\n});\n\nconst Section = styled('section', {\n  height: '450px',\n  width: '175px',\n  display: 'block !important',\n  background: '#16181D',\n  borderRadius: '8px',\n  color: '#C4C9D4',\n  marginBottom: '24px',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n\nconst useScrollspy = (elements, options) => {\n  const [\n    currentIntersectingElementIndex,\n    setCurrentIntersectingElementIndex,\n  ] = React.useState(-1);\n\n  const rootMargin = `-${(options && options.offset) || 0}px 0px 0px 0px`;\n\n  const observer = React.useRef();\n\n  React.useEffect(() => {\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n\n    observer.current = new IntersectionObserver(\n      (entries) => {\n        // find the index of the section that is currently intersecting\n        const indexOfElementIntersecting = entries.findIndex((entry) => {\n          return entry.intersectionRatio > 0;\n        });\n\n        // set this index to the state\n        setCurrentIntersectingElementIndex(indexOfElementIntersecting);\n      },\n      {\n        root: (options && options.root) || null,\n        // use this option to handle custom offset\n        rootMargin,\n      }\n    );\n\n    const { current: currentObserver } = observer;\n\n    // observe all the elements passed as argument of the hook\n    elements.forEach((element) =>\n      element ? currentObserver.observe(element) : null\n    );\n\n    return () => currentObserver.disconnect();\n  }, [elements, options, rootMargin]);\n\n  return [currentIntersectingElementIndex];\n};\n\nconst Article = () => {\n  const ids = ['part1', 'part2', 'part3'];\n  const [elements, setElements] = React.useState([]);\n  const [currentActiveIndex] = useScrollspy(elements, {\n    root: document.querySelector('#demo-root'),\n    offset: 20,\n  });\n\n  /**\n   You can ignore this, it's only here so it plays nicely with SSR :)\n  */\n  React.useEffect(() => {\n    const widgetElements = ids.map((item) =>\n      document.querySelector(`section[id=\"${item}\"]`)\n    );\n\n    setElements(widgetElements);\n  }, []);\n\n  return (\n    <Wrapper>\n      <TableOfContent>\n        <List>\n          {ids.map((id, index) => (\n            <li\n              key={id}\n              style={{\n                color:\n                  currentActiveIndex === index\n                    ? '#5786F5'\n                    : '#C4C9D4',\n              }}\n            >\n              Part {index + 1}\n            </li>\n          ))}\n        </List>\n      </TableOfContent>\n      <Content id=\"demo-root\">\n        {ids.map((id, index) => (\n          <Section key={id} id={id}>\n            <p>Part {index + 1}</p>\n            <p>Some Content</p>\n          </Section>\n        ))}\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Article;"},"/scene.css":{code:"\nhtml {\n    background: #20222B;\n}\n\ncanvas {\n    width: 100vw;\n    height: 100vh;\n}",hidden:!0}}})}}}]);