"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5193],{8057:function(n,e,t){t.d(e,{Z:function(){return m}});var o=t(1799),i=t(9396),a=t(5893),r=t(2752),s=t(1130),l={"/index.js":{code:'import React, { StrictMode } from "react";\nimport { createRoot } from \'react-dom/client\';\nimport "./styles.css";\nimport "./center.css";\n\nimport App from "./App";\n\nconst container = document.getElementById(\'root\');\nconst root = createRoot(container);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n',hidden:!0},"/center.css":{code:"\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 450px;\n    color: currentColor;\n}\n",hidden:!0},"/styles.css":{code:"/* Custom styles for your React previews here */\nbody {\n  font-family: sans-serif;\n  -webkit-font-smoothing: auto;\n  -moz-font-smoothing: auto;\n  -moz-osx-font-smoothing: grayscale;\n  font-smoothing: auto;\n  text-rendering: optimizeLegibility;\n  font-smooth: always;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n",hidden:!0},"/index.html":{code:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  <title>React app</title>\n</head>\n<body>\n  <div id="root"></div>\n</body>\n</html>\n',hidden:!0}},c={colors:{hover:"var(--maximeheckel-colors-brand)",clickable:"var(--maximeheckel-colors-typeface-secondary)",accent:"var(--maximeheckel-colors-brand)",errorSurface:"var(--maximeheckel-colors-danger-emphasis)",error:"var(--maximeheckel-colors-danger)",surface3:"var(--maximeheckel-colors-emphasis)",surface2:"var(--maximeheckel-border-color)",surface1:"var(--code-snippet-background)"},syntax:{plain:"var(--token-comment)",comment:{color:"var(--token-comment)"},keyword:"var(--token-keyword)",tag:"var(--token-symbol)",punctuation:"var(--token-punctuation)",definition:"var(--token-function)",property:"var(--token-function)",static:"var(--token-comment)",string:"var(--token-selector)"},font:{body:"var(--font-display)",mono:"var(--font-mono)",size:"14px",lineHeight:"26px"}},d={showNavigator:!1,showInlineErrors:!0,showLineNumbers:!0,editorHeight:520},p=(0,s.g)("div",{".sp-layout":{position:"relative",marginBottom:"2.25rem",borderRadius:"var(--border-radius-2)",boxShadow:s.a[1],"@media (max-width: 750px)":{display:"block"},"@media (max-width: 1200px)":{width:"100vw",left:"50%",right:"50%",marginLeft:"-50vw",marginRight:"-50vw",borderRadius:"0px"},"@media (min-width: 1200px)":{position:"relative",width:"calc(100% + 200px)",marginLeft:"-100px",marginRight:"-100px"}},".cm-gutterElement":{fontSize:"12px",userSelect:"none",opacity:"1",color:"var(--maximeheckel-colors-typeface-tertiary)"},".button":{backgroundColor:"var(--maximeheckel-colors-body)!important",cursor:"pointer !important","&:hover":{backgroundColor:"var(--maximeheckel-colors-body)!important"}}}),m=function(n){var e,t=n.files,s=n.dependencies,m=n.template,h=n.autorun,u=void 0===h||h,f=n.editorOnly,g=void 0!==f&&f,x=n.renderOnly,v=void 0!==x&&x,b=(null===(e=n.options)||void 0===e?void 0:e.editorWidthPercentage)||50,y=100-b,k={react:l,"react-ts":"",vanilla:"","vanilla-ts":"",angular:"",vue:"",vue3:"",svelte:"",solid:""};return(0,a.jsx)(p,{children:(0,a.jsx)(r.oT,{template:m,theme:c,files:(0,o.Z)({},t,k[m]),customSetup:{dependencies:s||{}},options:{autorun:u},children:(0,a.jsxs)(r.sp,{children:[g?null:(0,a.jsx)(r.Gj,{showNavigator:d.showNavigator,style:{height:d.editorHeight,flexGrow:y,flexShrink:y,minWidth:y/(y+b)*700}}),v?null:(0,a.jsx)(r._V,(0,i.Z)((0,o.Z)({},d),{style:{height:d.editorHeight,flexGrow:b,flexShrink:b,minWidth:b/(y+b)*700}}))]})})})}},5193:function(n,e,t){t.r(e),t.d(e,{default:function(){return s}});var o=t(5893),i=t(2498),a=t(8057),r={snippet1:"import { motion } from 'framer-motion';\nimport './scene.css';\n\nconst Example1 = () => {\n  return (\n    <div style={{ marginBottom: '50px' }}>\n      <p>Example 1</p>\n      <motion.div\n        style={{\n          background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n          height: '100px',\n          width: '100px',\n          borderRadius: '10px',\n        }}\n        /**\n          Below, the initial and animation field are set to declare a translation\n          animation along the horizontal axis \"x\"\n          Hence why we're setting an \"x\" field in both objects.\n        **/\n        initial={{\n          x: -100,\n        }}\n        animate={{\n          x: 100,\n        }}\n        /**\n          The code below specifies the transition type for our element.\n          You can comment the whole transition prop below, and Framer \n          Motion will fallback to \"smart defaults\".\n\n          In this case, since we have a translation, the default transition type is\n          spring, so you should see the element moving from left to right and \"bounce\"\n          a when reaching its target state, like a spring!\n        **/\n        transition={{\n          type: 'tween',\n          ease: 'easeInOut',\n          repeat: Infinity,\n          repeatType: 'reverse',\n          repeatDelay: 1,\n          duration: 2,\n        }}\n      />\n    </div>\n  );\n};\n\nconst Example2 = () => {\n  return (\n    <div style={{ marginBottom: '50px' }}>\n      <p>Example 2</p>\n      <motion.div\n        style={{\n          background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n          height: '100px',\n          width: '100px',\n          borderRadius: '10px',\n        }}\n        /**\n          Combining animations in Framer Motion is very easy!\n          You can simply add extra fields to your initial and target object.\n          Here for example, our element rotates between 0 and 180 degrees, if\n          we want to have it translate horizontally at the same time, we can\n          simply add an \"x\" field, like in the example above.\n\n          I added these fields below, commented. If you uncomment them,\n          you should see our element both rotate and translate at the same\n          time.\n\n          You can try changing the translation from horizontal to vertitcal, by\n          replacing the \"x\" field with an \"y\" field.\n        **/\n        initial={{\n          rotate: 0,\n          // x: -100\n        }}\n        animate={{\n          rotate: 180,\n          // x: 100\n        }}\n        transition={{\n          type: 'tween',\n          ease: 'easeInOut',\n          repeat: Infinity,\n          repeatType: 'reverse',\n          repeatDelay: 1,\n          duration: 2,\n        }}\n      />\n    </div>\n  );\n};\n\nconst Examples = () => (\n  <div>\n    <Example1 />\n    <Example2 />\n  </div>\n);\n\nexport default Examples;",snippet2:"import { motion } from 'framer-motion';\nimport React from 'react';\nimport './scene.css';\n\nconst Example = () => {\n  const [isClicked, setIsClicked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (isClicked) {\n      setTimeout(() => setIsClicked(false), 3000);\n    }\n  }, [isClicked]);\n\n  const duration = 0.6;\n  const buttonVariants = {\n    hover: {\n      /**\n       * Combining different animation in variants works the same way it works\n       * for inline animation objects\n       *\n       * For the first example, to make the button scale, you simply have to\n       * uncomment the following. Once done, hover the button and notice how\n       * it now double in size!\n       */\n      // scale: 2,\n      rotate: 360,\n    },\n    pressed: {\n      scale: 0.95,\n    },\n    clicked: {\n      scale: 1,\n    },\n    notClicked: {\n      scale: 1,\n    },\n  };\n\n  /**\n   * Comment the buttonvariants object above and\n   * uncomment the one below to try out the second\n   * example:\n   *\n   * - the button will not scale back to its basic size once clicked\n   * - once clicked, the hover animation will not happen. It will use\n   * the \"isClicked\" custom prop passed to the button component below\n   */\n\n  /* \n  const buttonVariants = {\n    hover: (isClicked) => ({\n      scale: isClicked ? 2 : 3,\n      rotate: isClicked ? 0 : 360,\n    }),\n    pressed: {\n      scale: 0.95,\n    },\n    clicked: {\n      scale: 2,\n    },\n    notClicked: {\n      scale: 1,\n    },\n  };\n  */\n\n  return (\n    <motion.button\n      style={{\n        background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n        color: 'black',\n        border: 'none',\n        height: '50px',\n        width: '200px',\n        borderRadius: '10px',\n        cursor: isClicked ? 'default' : 'pointer',\n        outline: 'none',\n        boxShadow: '6px 4px 12px -6px rgba(0,24,40,0.25)',\n      }}\n      aria-label=\"Click Me!\"\n      title=\"Click Me!\"\n      onClick={() => {\n        setIsClicked(true);\n      }}\n      /**\n       * Here we pass the buttonVariants object as variants. It contains 4\n       * different target objects\n       * - hover: which is used for the whileHover prop\n       * - pressed: which is used for the whileTap prop\n       * - clicked and notClicked which are respecively used for animate prop\n       * when the button is clicked and not clicked (based on the state of the\n       * button)\n       *\n       * Reference to these animation objects are passed as strings to their\n       * props\n       *\n       * e.g. whileHover=\"hover\"\n       */\n      variants={buttonVariants}\n      animate={isClicked ? 'clicked' : 'notClicked'}\n      whileHover=\"hover\"\n      whileTap=\"pressed\"\n      /**\n       * Uncomment the following to allow our buttonVariants objects to know\n       * about the status of the button.\n       *\n       * This lets us redefine variants based on the status button\n       */\n      // custom={isClicked}\n      transition={{\n        duration,\n      }}\n    >\n      {isClicked ? 'Clicked!' : 'Click Me!'}\n    </motion.button>\n  );\n};\n\nexport default Example;",snippet3:"import { motion, useMotionValue, useTransform } from 'framer-motion';\nimport './scene.css';\n\nconst Example = () => {\n  const blockVariants = {\n    initial: {\n      rotate: 0,\n    },\n    target: {\n      rotate: 360,\n    },\n  };\n\n  const rotate = useMotionValue(0);\n  /**\n   * Here we tie together the value of \"scale\" to the value\n   * of \"rotate\"\n   * The scale will increase along the rotation, from 0\n   * until the rotation reaches 270 degrees ([0, 270])\n   * where the scale property will be equal to 1 ([0, 1]).\n   * The scale will stop increasing while the rotation\n   * finishes its transition\n   *\n   * You can try to modify the values below, and see how it\n   * impacts the resulting transition.\n   */\n  const scale = useTransform(rotate, [0, 270], [0, 1]);\n\n  return (\n    <motion.div\n      style={{\n        background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n        height: '100px',\n        width: '100px',\n        borderRadius: '10px',\n        rotate,\n        scale,\n      }}\n      variants={blockVariants}\n      initial=\"initial\"\n      animate=\"target\"\n      transition={{\n        ease: 'easeInOut',\n        duration: 4,\n      }}\n    />\n  );\n};\n\nexport default Example;",snippet4:"import { motion } from 'framer-motion';\nimport './scene.css';\n\nconst Example = () => {\n  const blockVariants = {\n    initial: {\n      y: -50,\n    },\n    target: {\n      y: 100,\n    },\n  };\n\n  return (\n    <motion.div\n      style={{\n        background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n        height: '100px',\n        width: '100px',\n        borderRadius: '50%',\n      }}\n      variants={blockVariants}\n      initial=\"initial\"\n      animate=\"target\"\n      transition={{\n        ease: 'easeInOut',\n        duration: 0.7,\n        delay: 1,\n        repeat: 3,\n        // repeat: Infinity,\n        repeatType: 'mirror',\n        repeatDelay: 0,\n      }}\n    />\n  );\n};\n\nexport default Example;",snippet5:"import { motion } from 'framer-motion';\nimport './scene.css';\n\nconst Example = () => {\n  const replies = [\n    {\n      id: '1',\n      photo: '\ud83d\udc36',\n    },\n    {\n      id: '2',\n      photo: '\ud83d\udc31',\n    },\n    {\n      id: '3',\n      photo: '\ud83d\udc30',\n    },\n    {\n      id: '4',\n      photo: '\ud83d\udc2d',\n    },\n    {\n      id: '5',\n      photo: '\ud83d\udc39',\n    },\n    {\n      id: '6',\n      photo: '\ud83e\udd8a',\n    },\n    {\n      id: '7',\n      photo: '\ud83d\udc3b',\n    },\n    {\n      id: '8',\n      photo: '\ud83d\udc3c',\n    },\n    {\n      id: '9',\n      photo: '\ud83d\udc28',\n    },\n  ];\n\n  const list = {\n    visible: {\n      opacity: 1,\n      transition: {\n        // delayChildren: 1.5,\n        staggerChildren: 0.1,\n      },\n    },\n    hidden: {\n      opacity: 0,\n    },\n  };\n\n  const item = {\n    visible: { opacity: 1, x: 0 },\n    hidden: { opacity: 0, x: -10 },\n  };\n\n  return (\n    <>\n      <h4>Already {replies.length} furry friends liked this post!</h4>\n      <motion.ul\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: '0px',\n          marginBottom: '8px',\n          marginTop: '15px',\n          paddingLeft: '0px',\n        }}\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={list}\n      >\n        {replies.map((reply) => (\n          <motion.li\n            style={{\n              listStyle: 'none',\n              marginRight: '-10px',\n            }}\n            key={reply.id}\n            data-testid={reply.id}\n            variants={item}\n            whileHover={{\n              // scale: 1.2,\n              marginRight: '5px',\n              transition: { ease: 'easeOut' },\n            }}\n          >\n            <div\n              style={{\n                background: 'linear-gradient(90deg,#ffa0ae 0%,#aacaef 75%)',\n                height: '50px',\n                width: '50px',\n                borderRadius: '50%',\n                border: '3px solid #4C79DF',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                cursor: 'pointer',\n                fontSize: '38px',\n              }}\n            >\n              <span role=\"img\" style={{ paddingRight: 0 }}>\n                {reply.photo}\n              </span>\n            </div>\n          </motion.li>\n        ))}\n      </motion.ul>\n    </>\n  );\n};\n\nexport default Example;"},s=function(n){var e=n.snippet,t=(0,i.d)().dark;return(0,o.jsx)(a.Z,{autorun:!0,template:"react",dependencies:{"framer-motion":"6.2.4"},files:{"/App.js":{code:r[e]},"/scene.css":{code:t?"\nhtml {\n    background: #20222B;\n    color: white;\n}\n\ncanvas {\n    width: 100vw;\n    height: 100vh;\n}":"\nhtml {\n    background: #F7F7FB;\n    color: black;\n}\n\ncanvas {\n    width: 100vw;\n    height: 100vh;\n}",hidden:!0}}})}}}]);